# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class TechnicalData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Technical data related to the client's use of the website
    """


    class MetaOapg:
        
        class properties:
            
            
            class ipAddress(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ipAddress':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class userAgent(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userAgent':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class urlReferrer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urlReferrer':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class browserType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browserType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class browserName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browserName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class browserVersion(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browserVersion':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class platform(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'platform':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isBeta(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isBeta':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isMobileDevice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isMobileDevice':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mobileDeviceManufacturer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobileDeviceManufacturer':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mobileDeviceModel(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobileDeviceModel':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isDoNotTrackEnabled(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isDoNotTrackEnabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class emailHost(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'emailHost':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isNameInEmail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isNameInEmail':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isNameOrAddressLowercased(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isNameOrAddressLowercased':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class channel(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channel':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "ipAddress": ipAddress,
                "userAgent": userAgent,
                "urlReferrer": urlReferrer,
                "browserType": browserType,
                "browserName": browserName,
                "browserVersion": browserVersion,
                "platform": platform,
                "isBeta": isBeta,
                "isMobileDevice": isMobileDevice,
                "mobileDeviceManufacturer": mobileDeviceManufacturer,
                "mobileDeviceModel": mobileDeviceModel,
                "isDoNotTrackEnabled": isDoNotTrackEnabled,
                "emailHost": emailHost,
                "isNameInEmail": isNameInEmail,
                "isNameOrAddressLowercased": isNameOrAddressLowercased,
                "channel": channel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAgent"]) -> MetaOapg.properties.userAgent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urlReferrer"]) -> MetaOapg.properties.urlReferrer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserType"]) -> MetaOapg.properties.browserType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserName"]) -> MetaOapg.properties.browserName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserVersion"]) -> MetaOapg.properties.browserVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBeta"]) -> MetaOapg.properties.isBeta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMobileDevice"]) -> MetaOapg.properties.isMobileDevice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobileDeviceManufacturer"]) -> MetaOapg.properties.mobileDeviceManufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobileDeviceModel"]) -> MetaOapg.properties.mobileDeviceModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDoNotTrackEnabled"]) -> MetaOapg.properties.isDoNotTrackEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailHost"]) -> MetaOapg.properties.emailHost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isNameInEmail"]) -> MetaOapg.properties.isNameInEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isNameOrAddressLowercased"]) -> MetaOapg.properties.isNameOrAddressLowercased: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ipAddress", "userAgent", "urlReferrer", "browserType", "browserName", "browserVersion", "platform", "isBeta", "isMobileDevice", "mobileDeviceManufacturer", "mobileDeviceModel", "isDoNotTrackEnabled", "emailHost", "isNameInEmail", "isNameOrAddressLowercased", "channel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAgent"]) -> typing.Union[MetaOapg.properties.userAgent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urlReferrer"]) -> typing.Union[MetaOapg.properties.urlReferrer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserType"]) -> typing.Union[MetaOapg.properties.browserType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserName"]) -> typing.Union[MetaOapg.properties.browserName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserVersion"]) -> typing.Union[MetaOapg.properties.browserVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBeta"]) -> typing.Union[MetaOapg.properties.isBeta, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMobileDevice"]) -> typing.Union[MetaOapg.properties.isMobileDevice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobileDeviceManufacturer"]) -> typing.Union[MetaOapg.properties.mobileDeviceManufacturer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobileDeviceModel"]) -> typing.Union[MetaOapg.properties.mobileDeviceModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDoNotTrackEnabled"]) -> typing.Union[MetaOapg.properties.isDoNotTrackEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailHost"]) -> typing.Union[MetaOapg.properties.emailHost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isNameInEmail"]) -> typing.Union[MetaOapg.properties.isNameInEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isNameOrAddressLowercased"]) -> typing.Union[MetaOapg.properties.isNameOrAddressLowercased, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ipAddress", "userAgent", "urlReferrer", "browserType", "browserName", "browserVersion", "platform", "isBeta", "isMobileDevice", "mobileDeviceManufacturer", "mobileDeviceModel", "isDoNotTrackEnabled", "emailHost", "isNameInEmail", "isNameOrAddressLowercased", "channel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, None, str, schemas.Unset] = schemas.unset,
        userAgent: typing.Union[MetaOapg.properties.userAgent, None, str, schemas.Unset] = schemas.unset,
        urlReferrer: typing.Union[MetaOapg.properties.urlReferrer, None, str, schemas.Unset] = schemas.unset,
        browserType: typing.Union[MetaOapg.properties.browserType, None, str, schemas.Unset] = schemas.unset,
        browserName: typing.Union[MetaOapg.properties.browserName, None, str, schemas.Unset] = schemas.unset,
        browserVersion: typing.Union[MetaOapg.properties.browserVersion, None, str, schemas.Unset] = schemas.unset,
        platform: typing.Union[MetaOapg.properties.platform, None, str, schemas.Unset] = schemas.unset,
        isBeta: typing.Union[MetaOapg.properties.isBeta, None, str, schemas.Unset] = schemas.unset,
        isMobileDevice: typing.Union[MetaOapg.properties.isMobileDevice, None, str, schemas.Unset] = schemas.unset,
        mobileDeviceManufacturer: typing.Union[MetaOapg.properties.mobileDeviceManufacturer, None, str, schemas.Unset] = schemas.unset,
        mobileDeviceModel: typing.Union[MetaOapg.properties.mobileDeviceModel, None, str, schemas.Unset] = schemas.unset,
        isDoNotTrackEnabled: typing.Union[MetaOapg.properties.isDoNotTrackEnabled, None, str, schemas.Unset] = schemas.unset,
        emailHost: typing.Union[MetaOapg.properties.emailHost, None, str, schemas.Unset] = schemas.unset,
        isNameInEmail: typing.Union[MetaOapg.properties.isNameInEmail, None, str, schemas.Unset] = schemas.unset,
        isNameOrAddressLowercased: typing.Union[MetaOapg.properties.isNameOrAddressLowercased, None, str, schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TechnicalData':
        return super().__new__(
            cls,
            *args,
            ipAddress=ipAddress,
            userAgent=userAgent,
            urlReferrer=urlReferrer,
            browserType=browserType,
            browserName=browserName,
            browserVersion=browserVersion,
            platform=platform,
            isBeta=isBeta,
            isMobileDevice=isMobileDevice,
            mobileDeviceManufacturer=mobileDeviceManufacturer,
            mobileDeviceModel=mobileDeviceModel,
            isDoNotTrackEnabled=isDoNotTrackEnabled,
            emailHost=emailHost,
            isNameInEmail=isNameInEmail,
            isNameOrAddressLowercased=isNameOrAddressLowercased,
            channel=channel,
            _configuration=_configuration,
            **kwargs,
        )
