# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class Expenses(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Monthly expenses of the borrower
    """


    class MetaOapg:
        
        class properties:
            taxAtSource = schemas.Float64Schema
            
            
            class housingCondition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'housingCondition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class residentalSituation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'residentalSituation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            monthlyRent = schemas.Float64Schema
            
            
            class payCostSolely(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payCostSolely':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            monthlyCostPortion = schemas.Float64Schema
            monthlyMortgage = schemas.Float64Schema
            mortgageAmount = schemas.Float64Schema
            
            
            class anotherLoan(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'anotherLoan':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class anotherLoanLender(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'anotherLoanLender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            anotherLoanAmount = schemas.Float64Schema
            anotherLoanInterestRate = schemas.Float64Schema
            anotherLoanMonthlyPayment = schemas.Float64Schema
            insuranceMonthlyCost = schemas.Float64Schema
            privateTransportMonthlyCost = schemas.Float64Schema
            publicTransportMonthlyCost = schemas.Float64Schema
            
            
            class dependentChildren(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dependentChildren':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            childrenYoungerThanTen = schemas.Int32Schema
            childrenOlderThanTen = schemas.Int32Schema
            
            
            class alimonyOrChildSupport(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'alimonyOrChildSupport':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            alimonyOrChildSupportAmount = schemas.Float64Schema
            
            
            class furtherRecurringMonthlyCost(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'furtherRecurringMonthlyCost':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            furtherRecurringMonthlyCost1Amount = schemas.Float64Schema
            
            
            class furtherRecurringMonthlyCost1Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'furtherRecurringMonthlyCost1Description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            furtherRecurringMonthlyCost2Amount = schemas.Float64Schema
            
            
            class furtherRecurringMonthlyCost2Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'furtherRecurringMonthlyCost2Description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "taxAtSource": taxAtSource,
                "housingCondition": housingCondition,
                "residentalSituation": residentalSituation,
                "monthlyRent": monthlyRent,
                "payCostSolely": payCostSolely,
                "monthlyCostPortion": monthlyCostPortion,
                "monthlyMortgage": monthlyMortgage,
                "mortgageAmount": mortgageAmount,
                "anotherLoan": anotherLoan,
                "anotherLoanLender": anotherLoanLender,
                "anotherLoanAmount": anotherLoanAmount,
                "anotherLoanInterestRate": anotherLoanInterestRate,
                "anotherLoanMonthlyPayment": anotherLoanMonthlyPayment,
                "insuranceMonthlyCost": insuranceMonthlyCost,
                "privateTransportMonthlyCost": privateTransportMonthlyCost,
                "publicTransportMonthlyCost": publicTransportMonthlyCost,
                "dependentChildren": dependentChildren,
                "childrenYoungerThanTen": childrenYoungerThanTen,
                "childrenOlderThanTen": childrenOlderThanTen,
                "alimonyOrChildSupport": alimonyOrChildSupport,
                "alimonyOrChildSupportAmount": alimonyOrChildSupportAmount,
                "furtherRecurringMonthlyCost": furtherRecurringMonthlyCost,
                "furtherRecurringMonthlyCost1Amount": furtherRecurringMonthlyCost1Amount,
                "furtherRecurringMonthlyCost1Description": furtherRecurringMonthlyCost1Description,
                "furtherRecurringMonthlyCost2Amount": furtherRecurringMonthlyCost2Amount,
                "furtherRecurringMonthlyCost2Description": furtherRecurringMonthlyCost2Description,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxAtSource"]) -> MetaOapg.properties.taxAtSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["housingCondition"]) -> MetaOapg.properties.housingCondition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residentalSituation"]) -> MetaOapg.properties.residentalSituation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyRent"]) -> MetaOapg.properties.monthlyRent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payCostSolely"]) -> MetaOapg.properties.payCostSolely: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyCostPortion"]) -> MetaOapg.properties.monthlyCostPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyMortgage"]) -> MetaOapg.properties.monthlyMortgage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mortgageAmount"]) -> MetaOapg.properties.mortgageAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anotherLoan"]) -> MetaOapg.properties.anotherLoan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anotherLoanLender"]) -> MetaOapg.properties.anotherLoanLender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anotherLoanAmount"]) -> MetaOapg.properties.anotherLoanAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anotherLoanInterestRate"]) -> MetaOapg.properties.anotherLoanInterestRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anotherLoanMonthlyPayment"]) -> MetaOapg.properties.anotherLoanMonthlyPayment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insuranceMonthlyCost"]) -> MetaOapg.properties.insuranceMonthlyCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateTransportMonthlyCost"]) -> MetaOapg.properties.privateTransportMonthlyCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicTransportMonthlyCost"]) -> MetaOapg.properties.publicTransportMonthlyCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentChildren"]) -> MetaOapg.properties.dependentChildren: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childrenYoungerThanTen"]) -> MetaOapg.properties.childrenYoungerThanTen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childrenOlderThanTen"]) -> MetaOapg.properties.childrenOlderThanTen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alimonyOrChildSupport"]) -> MetaOapg.properties.alimonyOrChildSupport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alimonyOrChildSupportAmount"]) -> MetaOapg.properties.alimonyOrChildSupportAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost"]) -> MetaOapg.properties.furtherRecurringMonthlyCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost1Amount"]) -> MetaOapg.properties.furtherRecurringMonthlyCost1Amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost1Description"]) -> MetaOapg.properties.furtherRecurringMonthlyCost1Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost2Amount"]) -> MetaOapg.properties.furtherRecurringMonthlyCost2Amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost2Description"]) -> MetaOapg.properties.furtherRecurringMonthlyCost2Description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["taxAtSource", "housingCondition", "residentalSituation", "monthlyRent", "payCostSolely", "monthlyCostPortion", "monthlyMortgage", "mortgageAmount", "anotherLoan", "anotherLoanLender", "anotherLoanAmount", "anotherLoanInterestRate", "anotherLoanMonthlyPayment", "insuranceMonthlyCost", "privateTransportMonthlyCost", "publicTransportMonthlyCost", "dependentChildren", "childrenYoungerThanTen", "childrenOlderThanTen", "alimonyOrChildSupport", "alimonyOrChildSupportAmount", "furtherRecurringMonthlyCost", "furtherRecurringMonthlyCost1Amount", "furtherRecurringMonthlyCost1Description", "furtherRecurringMonthlyCost2Amount", "furtherRecurringMonthlyCost2Description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxAtSource"]) -> typing.Union[MetaOapg.properties.taxAtSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["housingCondition"]) -> typing.Union[MetaOapg.properties.housingCondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residentalSituation"]) -> typing.Union[MetaOapg.properties.residentalSituation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyRent"]) -> typing.Union[MetaOapg.properties.monthlyRent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payCostSolely"]) -> typing.Union[MetaOapg.properties.payCostSolely, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyCostPortion"]) -> typing.Union[MetaOapg.properties.monthlyCostPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyMortgage"]) -> typing.Union[MetaOapg.properties.monthlyMortgage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mortgageAmount"]) -> typing.Union[MetaOapg.properties.mortgageAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anotherLoan"]) -> typing.Union[MetaOapg.properties.anotherLoan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anotherLoanLender"]) -> typing.Union[MetaOapg.properties.anotherLoanLender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anotherLoanAmount"]) -> typing.Union[MetaOapg.properties.anotherLoanAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anotherLoanInterestRate"]) -> typing.Union[MetaOapg.properties.anotherLoanInterestRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anotherLoanMonthlyPayment"]) -> typing.Union[MetaOapg.properties.anotherLoanMonthlyPayment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insuranceMonthlyCost"]) -> typing.Union[MetaOapg.properties.insuranceMonthlyCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateTransportMonthlyCost"]) -> typing.Union[MetaOapg.properties.privateTransportMonthlyCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicTransportMonthlyCost"]) -> typing.Union[MetaOapg.properties.publicTransportMonthlyCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentChildren"]) -> typing.Union[MetaOapg.properties.dependentChildren, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childrenYoungerThanTen"]) -> typing.Union[MetaOapg.properties.childrenYoungerThanTen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childrenOlderThanTen"]) -> typing.Union[MetaOapg.properties.childrenOlderThanTen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alimonyOrChildSupport"]) -> typing.Union[MetaOapg.properties.alimonyOrChildSupport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alimonyOrChildSupportAmount"]) -> typing.Union[MetaOapg.properties.alimonyOrChildSupportAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost"]) -> typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost1Amount"]) -> typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost1Amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost1Description"]) -> typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost1Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost2Amount"]) -> typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost2Amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["furtherRecurringMonthlyCost2Description"]) -> typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost2Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["taxAtSource", "housingCondition", "residentalSituation", "monthlyRent", "payCostSolely", "monthlyCostPortion", "monthlyMortgage", "mortgageAmount", "anotherLoan", "anotherLoanLender", "anotherLoanAmount", "anotherLoanInterestRate", "anotherLoanMonthlyPayment", "insuranceMonthlyCost", "privateTransportMonthlyCost", "publicTransportMonthlyCost", "dependentChildren", "childrenYoungerThanTen", "childrenOlderThanTen", "alimonyOrChildSupport", "alimonyOrChildSupportAmount", "furtherRecurringMonthlyCost", "furtherRecurringMonthlyCost1Amount", "furtherRecurringMonthlyCost1Description", "furtherRecurringMonthlyCost2Amount", "furtherRecurringMonthlyCost2Description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        taxAtSource: typing.Union[MetaOapg.properties.taxAtSource, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        housingCondition: typing.Union[MetaOapg.properties.housingCondition, None, str, schemas.Unset] = schemas.unset,
        residentalSituation: typing.Union[MetaOapg.properties.residentalSituation, None, str, schemas.Unset] = schemas.unset,
        monthlyRent: typing.Union[MetaOapg.properties.monthlyRent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payCostSolely: typing.Union[MetaOapg.properties.payCostSolely, None, str, schemas.Unset] = schemas.unset,
        monthlyCostPortion: typing.Union[MetaOapg.properties.monthlyCostPortion, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthlyMortgage: typing.Union[MetaOapg.properties.monthlyMortgage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mortgageAmount: typing.Union[MetaOapg.properties.mortgageAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        anotherLoan: typing.Union[MetaOapg.properties.anotherLoan, None, str, schemas.Unset] = schemas.unset,
        anotherLoanLender: typing.Union[MetaOapg.properties.anotherLoanLender, None, str, schemas.Unset] = schemas.unset,
        anotherLoanAmount: typing.Union[MetaOapg.properties.anotherLoanAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        anotherLoanInterestRate: typing.Union[MetaOapg.properties.anotherLoanInterestRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        anotherLoanMonthlyPayment: typing.Union[MetaOapg.properties.anotherLoanMonthlyPayment, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        insuranceMonthlyCost: typing.Union[MetaOapg.properties.insuranceMonthlyCost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        privateTransportMonthlyCost: typing.Union[MetaOapg.properties.privateTransportMonthlyCost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        publicTransportMonthlyCost: typing.Union[MetaOapg.properties.publicTransportMonthlyCost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dependentChildren: typing.Union[MetaOapg.properties.dependentChildren, None, str, schemas.Unset] = schemas.unset,
        childrenYoungerThanTen: typing.Union[MetaOapg.properties.childrenYoungerThanTen, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        childrenOlderThanTen: typing.Union[MetaOapg.properties.childrenOlderThanTen, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        alimonyOrChildSupport: typing.Union[MetaOapg.properties.alimonyOrChildSupport, None, str, schemas.Unset] = schemas.unset,
        alimonyOrChildSupportAmount: typing.Union[MetaOapg.properties.alimonyOrChildSupportAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        furtherRecurringMonthlyCost: typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost, None, str, schemas.Unset] = schemas.unset,
        furtherRecurringMonthlyCost1Amount: typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost1Amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        furtherRecurringMonthlyCost1Description: typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost1Description, None, str, schemas.Unset] = schemas.unset,
        furtherRecurringMonthlyCost2Amount: typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost2Amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        furtherRecurringMonthlyCost2Description: typing.Union[MetaOapg.properties.furtherRecurringMonthlyCost2Description, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Expenses':
        return super().__new__(
            cls,
            *args,
            taxAtSource=taxAtSource,
            housingCondition=housingCondition,
            residentalSituation=residentalSituation,
            monthlyRent=monthlyRent,
            payCostSolely=payCostSolely,
            monthlyCostPortion=monthlyCostPortion,
            monthlyMortgage=monthlyMortgage,
            mortgageAmount=mortgageAmount,
            anotherLoan=anotherLoan,
            anotherLoanLender=anotherLoanLender,
            anotherLoanAmount=anotherLoanAmount,
            anotherLoanInterestRate=anotherLoanInterestRate,
            anotherLoanMonthlyPayment=anotherLoanMonthlyPayment,
            insuranceMonthlyCost=insuranceMonthlyCost,
            privateTransportMonthlyCost=privateTransportMonthlyCost,
            publicTransportMonthlyCost=publicTransportMonthlyCost,
            dependentChildren=dependentChildren,
            childrenYoungerThanTen=childrenYoungerThanTen,
            childrenOlderThanTen=childrenOlderThanTen,
            alimonyOrChildSupport=alimonyOrChildSupport,
            alimonyOrChildSupportAmount=alimonyOrChildSupportAmount,
            furtherRecurringMonthlyCost=furtherRecurringMonthlyCost,
            furtherRecurringMonthlyCost1Amount=furtherRecurringMonthlyCost1Amount,
            furtherRecurringMonthlyCost1Description=furtherRecurringMonthlyCost1Description,
            furtherRecurringMonthlyCost2Amount=furtherRecurringMonthlyCost2Amount,
            furtherRecurringMonthlyCost2Description=furtherRecurringMonthlyCost2Description,
            _configuration=_configuration,
            **kwargs,
        )
