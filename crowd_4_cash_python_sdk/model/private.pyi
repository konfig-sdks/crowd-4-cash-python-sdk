# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class Private(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A person who takes out a loan
    """


    class MetaOapg:
        
        class properties:
            borrowerId = schemas.Int32Schema
            
            
            class zip(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'zip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            age = schemas.Int32Schema
            
            
            class gender(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class category(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class housingCondition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'housingCondition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class residentialSituation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'residentialSituation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class nationality(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nationality':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            children = schemas.Int32Schema
            
            
            class profession(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'profession':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class workSince(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workSince':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class solvency(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'solvency':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            monthlyNetIncome = schemas.Float64Schema
            partnerIncome = schemas.Float64Schema
            availableAmount = schemas.Float64Schema
            availableAmountPercentage = schemas.Float64Schema
            monthlyPayment = schemas.Float64Schema
            
            
            class collectionProcedures(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collectionProcedures':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "borrowerId": borrowerId,
                "zip": zip,
                "city": city,
                "age": age,
                "gender": gender,
                "category": category,
                "housingCondition": housingCondition,
                "residentialSituation": residentialSituation,
                "nationality": nationality,
                "children": children,
                "profession": profession,
                "workSince": workSince,
                "solvency": solvency,
                "monthlyNetIncome": monthlyNetIncome,
                "partnerIncome": partnerIncome,
                "availableAmount": availableAmount,
                "availableAmountPercentage": availableAmountPercentage,
                "monthlyPayment": monthlyPayment,
                "collectionProcedures": collectionProcedures,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borrowerId"]) -> MetaOapg.properties.borrowerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["age"]) -> MetaOapg.properties.age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["housingCondition"]) -> MetaOapg.properties.housingCondition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residentialSituation"]) -> MetaOapg.properties.residentialSituation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["children"]) -> MetaOapg.properties.children: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profession"]) -> MetaOapg.properties.profession: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workSince"]) -> MetaOapg.properties.workSince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["solvency"]) -> MetaOapg.properties.solvency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyNetIncome"]) -> MetaOapg.properties.monthlyNetIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerIncome"]) -> MetaOapg.properties.partnerIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableAmount"]) -> MetaOapg.properties.availableAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableAmountPercentage"]) -> MetaOapg.properties.availableAmountPercentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyPayment"]) -> MetaOapg.properties.monthlyPayment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionProcedures"]) -> MetaOapg.properties.collectionProcedures: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["borrowerId", "zip", "city", "age", "gender", "category", "housingCondition", "residentialSituation", "nationality", "children", "profession", "workSince", "solvency", "monthlyNetIncome", "partnerIncome", "availableAmount", "availableAmountPercentage", "monthlyPayment", "collectionProcedures", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borrowerId"]) -> typing.Union[MetaOapg.properties.borrowerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["age"]) -> typing.Union[MetaOapg.properties.age, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["housingCondition"]) -> typing.Union[MetaOapg.properties.housingCondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residentialSituation"]) -> typing.Union[MetaOapg.properties.residentialSituation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> typing.Union[MetaOapg.properties.nationality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["children"]) -> typing.Union[MetaOapg.properties.children, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profession"]) -> typing.Union[MetaOapg.properties.profession, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workSince"]) -> typing.Union[MetaOapg.properties.workSince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["solvency"]) -> typing.Union[MetaOapg.properties.solvency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyNetIncome"]) -> typing.Union[MetaOapg.properties.monthlyNetIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerIncome"]) -> typing.Union[MetaOapg.properties.partnerIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableAmount"]) -> typing.Union[MetaOapg.properties.availableAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableAmountPercentage"]) -> typing.Union[MetaOapg.properties.availableAmountPercentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyPayment"]) -> typing.Union[MetaOapg.properties.monthlyPayment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionProcedures"]) -> typing.Union[MetaOapg.properties.collectionProcedures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["borrowerId", "zip", "city", "age", "gender", "category", "housingCondition", "residentialSituation", "nationality", "children", "profession", "workSince", "solvency", "monthlyNetIncome", "partnerIncome", "availableAmount", "availableAmountPercentage", "monthlyPayment", "collectionProcedures", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        borrowerId: typing.Union[MetaOapg.properties.borrowerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, None, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, None, str, schemas.Unset] = schemas.unset,
        age: typing.Union[MetaOapg.properties.age, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, None, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, None, str, schemas.Unset] = schemas.unset,
        housingCondition: typing.Union[MetaOapg.properties.housingCondition, None, str, schemas.Unset] = schemas.unset,
        residentialSituation: typing.Union[MetaOapg.properties.residentialSituation, None, str, schemas.Unset] = schemas.unset,
        nationality: typing.Union[MetaOapg.properties.nationality, None, str, schemas.Unset] = schemas.unset,
        children: typing.Union[MetaOapg.properties.children, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        profession: typing.Union[MetaOapg.properties.profession, None, str, schemas.Unset] = schemas.unset,
        workSince: typing.Union[MetaOapg.properties.workSince, None, str, schemas.Unset] = schemas.unset,
        solvency: typing.Union[MetaOapg.properties.solvency, None, str, schemas.Unset] = schemas.unset,
        monthlyNetIncome: typing.Union[MetaOapg.properties.monthlyNetIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        partnerIncome: typing.Union[MetaOapg.properties.partnerIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        availableAmount: typing.Union[MetaOapg.properties.availableAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        availableAmountPercentage: typing.Union[MetaOapg.properties.availableAmountPercentage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthlyPayment: typing.Union[MetaOapg.properties.monthlyPayment, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        collectionProcedures: typing.Union[MetaOapg.properties.collectionProcedures, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Private':
        return super().__new__(
            cls,
            *args,
            borrowerId=borrowerId,
            zip=zip,
            city=city,
            age=age,
            gender=gender,
            category=category,
            housingCondition=housingCondition,
            residentialSituation=residentialSituation,
            nationality=nationality,
            children=children,
            profession=profession,
            workSince=workSince,
            solvency=solvency,
            monthlyNetIncome=monthlyNetIncome,
            partnerIncome=partnerIncome,
            availableAmount=availableAmount,
            availableAmountPercentage=availableAmountPercentage,
            monthlyPayment=monthlyPayment,
            collectionProcedures=collectionProcedures,
            _configuration=_configuration,
            **kwargs,
        )
