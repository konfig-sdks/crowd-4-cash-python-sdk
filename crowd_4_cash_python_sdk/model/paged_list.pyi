# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class PagedList(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class loans(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Loan']:
                        return Loan
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loans':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            currentPage = schemas.Int32Schema
            totalPages = schemas.Int32Schema
            pageSize = schemas.Int32Schema
            totalLoansCount = schemas.Int32Schema
            hasPreviousPage = schemas.BoolSchema
            hasNextPage = schemas.BoolSchema
            __annotations__ = {
                "loans": loans,
                "currentPage": currentPage,
                "totalPages": totalPages,
                "pageSize": pageSize,
                "totalLoansCount": totalLoansCount,
                "hasPreviousPage": hasPreviousPage,
                "hasNextPage": hasNextPage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loans"]) -> MetaOapg.properties.loans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPage"]) -> MetaOapg.properties.currentPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPages"]) -> MetaOapg.properties.totalPages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageSize"]) -> MetaOapg.properties.pageSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalLoansCount"]) -> MetaOapg.properties.totalLoansCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasPreviousPage"]) -> MetaOapg.properties.hasPreviousPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasNextPage"]) -> MetaOapg.properties.hasNextPage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["loans", "currentPage", "totalPages", "pageSize", "totalLoansCount", "hasPreviousPage", "hasNextPage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loans"]) -> typing.Union[MetaOapg.properties.loans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPage"]) -> typing.Union[MetaOapg.properties.currentPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPages"]) -> typing.Union[MetaOapg.properties.totalPages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageSize"]) -> typing.Union[MetaOapg.properties.pageSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalLoansCount"]) -> typing.Union[MetaOapg.properties.totalLoansCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasPreviousPage"]) -> typing.Union[MetaOapg.properties.hasPreviousPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasNextPage"]) -> typing.Union[MetaOapg.properties.hasNextPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["loans", "currentPage", "totalPages", "pageSize", "totalLoansCount", "hasPreviousPage", "hasNextPage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        loans: typing.Union[MetaOapg.properties.loans, list, tuple, None, schemas.Unset] = schemas.unset,
        currentPage: typing.Union[MetaOapg.properties.currentPage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalPages: typing.Union[MetaOapg.properties.totalPages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageSize: typing.Union[MetaOapg.properties.pageSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalLoansCount: typing.Union[MetaOapg.properties.totalLoansCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hasPreviousPage: typing.Union[MetaOapg.properties.hasPreviousPage, bool, schemas.Unset] = schemas.unset,
        hasNextPage: typing.Union[MetaOapg.properties.hasNextPage, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PagedList':
        return super().__new__(
            cls,
            *args,
            loans=loans,
            currentPage=currentPage,
            totalPages=totalPages,
            pageSize=pageSize,
            totalLoansCount=totalLoansCount,
            hasPreviousPage=hasPreviousPage,
            hasNextPage=hasNextPage,
            _configuration=_configuration,
            **kwargs,
        )

from crowd_4_cash_python_sdk.model.loan import Loan
