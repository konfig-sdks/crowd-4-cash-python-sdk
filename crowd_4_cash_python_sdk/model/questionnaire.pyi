# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class Questionnaire(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the major issues, market possition, growth of the company
    """


    class MetaOapg:
        
        class properties:
            
            
            class knownIssues(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'knownIssues':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class knownIssuesDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'knownIssuesDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class majorIssues(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'majorIssues':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class majorIssuesDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'majorIssuesDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class financialRecovery(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'financialRecovery':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class financialRecoveryDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'financialRecoveryDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class optionTeam(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'optionTeam':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class optionAudit(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'optionAudit':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class optionRevenue(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'optionRevenue':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class optionPrice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'optionPrice':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class marketEstimation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'marketEstimation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class marketPosition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'marketPosition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class marketRisk(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'marketRisk':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class currentRevenue(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currentRevenue':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class revenueGrowth(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'revenueGrowth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ebitdaMargin(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ebitdaMargin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "knownIssues": knownIssues,
                "knownIssuesDescription": knownIssuesDescription,
                "majorIssues": majorIssues,
                "majorIssuesDescription": majorIssuesDescription,
                "financialRecovery": financialRecovery,
                "financialRecoveryDescription": financialRecoveryDescription,
                "optionTeam": optionTeam,
                "optionAudit": optionAudit,
                "optionRevenue": optionRevenue,
                "optionPrice": optionPrice,
                "marketEstimation": marketEstimation,
                "marketPosition": marketPosition,
                "marketRisk": marketRisk,
                "currentRevenue": currentRevenue,
                "revenueGrowth": revenueGrowth,
                "ebitdaMargin": ebitdaMargin,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["knownIssues"]) -> MetaOapg.properties.knownIssues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["knownIssuesDescription"]) -> MetaOapg.properties.knownIssuesDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["majorIssues"]) -> MetaOapg.properties.majorIssues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["majorIssuesDescription"]) -> MetaOapg.properties.majorIssuesDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financialRecovery"]) -> MetaOapg.properties.financialRecovery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financialRecoveryDescription"]) -> MetaOapg.properties.financialRecoveryDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionTeam"]) -> MetaOapg.properties.optionTeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionAudit"]) -> MetaOapg.properties.optionAudit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionRevenue"]) -> MetaOapg.properties.optionRevenue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionPrice"]) -> MetaOapg.properties.optionPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marketEstimation"]) -> MetaOapg.properties.marketEstimation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marketPosition"]) -> MetaOapg.properties.marketPosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marketRisk"]) -> MetaOapg.properties.marketRisk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentRevenue"]) -> MetaOapg.properties.currentRevenue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revenueGrowth"]) -> MetaOapg.properties.revenueGrowth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ebitdaMargin"]) -> MetaOapg.properties.ebitdaMargin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["knownIssues", "knownIssuesDescription", "majorIssues", "majorIssuesDescription", "financialRecovery", "financialRecoveryDescription", "optionTeam", "optionAudit", "optionRevenue", "optionPrice", "marketEstimation", "marketPosition", "marketRisk", "currentRevenue", "revenueGrowth", "ebitdaMargin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["knownIssues"]) -> typing.Union[MetaOapg.properties.knownIssues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["knownIssuesDescription"]) -> typing.Union[MetaOapg.properties.knownIssuesDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["majorIssues"]) -> typing.Union[MetaOapg.properties.majorIssues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["majorIssuesDescription"]) -> typing.Union[MetaOapg.properties.majorIssuesDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financialRecovery"]) -> typing.Union[MetaOapg.properties.financialRecovery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financialRecoveryDescription"]) -> typing.Union[MetaOapg.properties.financialRecoveryDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionTeam"]) -> typing.Union[MetaOapg.properties.optionTeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionAudit"]) -> typing.Union[MetaOapg.properties.optionAudit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionRevenue"]) -> typing.Union[MetaOapg.properties.optionRevenue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionPrice"]) -> typing.Union[MetaOapg.properties.optionPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marketEstimation"]) -> typing.Union[MetaOapg.properties.marketEstimation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marketPosition"]) -> typing.Union[MetaOapg.properties.marketPosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marketRisk"]) -> typing.Union[MetaOapg.properties.marketRisk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentRevenue"]) -> typing.Union[MetaOapg.properties.currentRevenue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revenueGrowth"]) -> typing.Union[MetaOapg.properties.revenueGrowth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ebitdaMargin"]) -> typing.Union[MetaOapg.properties.ebitdaMargin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["knownIssues", "knownIssuesDescription", "majorIssues", "majorIssuesDescription", "financialRecovery", "financialRecoveryDescription", "optionTeam", "optionAudit", "optionRevenue", "optionPrice", "marketEstimation", "marketPosition", "marketRisk", "currentRevenue", "revenueGrowth", "ebitdaMargin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        knownIssues: typing.Union[MetaOapg.properties.knownIssues, None, str, schemas.Unset] = schemas.unset,
        knownIssuesDescription: typing.Union[MetaOapg.properties.knownIssuesDescription, None, str, schemas.Unset] = schemas.unset,
        majorIssues: typing.Union[MetaOapg.properties.majorIssues, None, str, schemas.Unset] = schemas.unset,
        majorIssuesDescription: typing.Union[MetaOapg.properties.majorIssuesDescription, None, str, schemas.Unset] = schemas.unset,
        financialRecovery: typing.Union[MetaOapg.properties.financialRecovery, None, str, schemas.Unset] = schemas.unset,
        financialRecoveryDescription: typing.Union[MetaOapg.properties.financialRecoveryDescription, None, str, schemas.Unset] = schemas.unset,
        optionTeam: typing.Union[MetaOapg.properties.optionTeam, None, str, schemas.Unset] = schemas.unset,
        optionAudit: typing.Union[MetaOapg.properties.optionAudit, None, str, schemas.Unset] = schemas.unset,
        optionRevenue: typing.Union[MetaOapg.properties.optionRevenue, None, str, schemas.Unset] = schemas.unset,
        optionPrice: typing.Union[MetaOapg.properties.optionPrice, None, str, schemas.Unset] = schemas.unset,
        marketEstimation: typing.Union[MetaOapg.properties.marketEstimation, None, str, schemas.Unset] = schemas.unset,
        marketPosition: typing.Union[MetaOapg.properties.marketPosition, None, str, schemas.Unset] = schemas.unset,
        marketRisk: typing.Union[MetaOapg.properties.marketRisk, None, str, schemas.Unset] = schemas.unset,
        currentRevenue: typing.Union[MetaOapg.properties.currentRevenue, None, str, schemas.Unset] = schemas.unset,
        revenueGrowth: typing.Union[MetaOapg.properties.revenueGrowth, None, str, schemas.Unset] = schemas.unset,
        ebitdaMargin: typing.Union[MetaOapg.properties.ebitdaMargin, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Questionnaire':
        return super().__new__(
            cls,
            *args,
            knownIssues=knownIssues,
            knownIssuesDescription=knownIssuesDescription,
            majorIssues=majorIssues,
            majorIssuesDescription=majorIssuesDescription,
            financialRecovery=financialRecovery,
            financialRecoveryDescription=financialRecoveryDescription,
            optionTeam=optionTeam,
            optionAudit=optionAudit,
            optionRevenue=optionRevenue,
            optionPrice=optionPrice,
            marketEstimation=marketEstimation,
            marketPosition=marketPosition,
            marketRisk=marketRisk,
            currentRevenue=currentRevenue,
            revenueGrowth=revenueGrowth,
            ebitdaMargin=ebitdaMargin,
            _configuration=_configuration,
            **kwargs,
        )
