# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class IntermediaryPartner(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    rental location that is the borrower itself e.g. garage/shop/store
    """


    class MetaOapg:
        
        class properties:
            partnerId = schemas.Int32Schema
            
            
            class partnerName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partnerName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class legalForm(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'legalForm':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class yearEstablished(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'yearEstablished':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class houseNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'houseNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class zip(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'zip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class phone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class iban(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iban':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            numberOfLoans = schemas.Int32Schema
            allowedLimitAmount = schemas.Float64Schema
            usedLimitAmount = schemas.Float64Schema
            remainingLimitAmount = schemas.Float64Schema
            __annotations__ = {
                "partnerId": partnerId,
                "partnerName": partnerName,
                "legalForm": legalForm,
                "yearEstablished": yearEstablished,
                "address": address,
                "houseNumber": houseNumber,
                "zip": zip,
                "city": city,
                "phone": phone,
                "iban": iban,
                "numberOfLoans": numberOfLoans,
                "allowedLimitAmount": allowedLimitAmount,
                "usedLimitAmount": usedLimitAmount,
                "remainingLimitAmount": remainingLimitAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerId"]) -> MetaOapg.properties.partnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerName"]) -> MetaOapg.properties.partnerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalForm"]) -> MetaOapg.properties.legalForm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearEstablished"]) -> MetaOapg.properties.yearEstablished: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["houseNumber"]) -> MetaOapg.properties.houseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfLoans"]) -> MetaOapg.properties.numberOfLoans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedLimitAmount"]) -> MetaOapg.properties.allowedLimitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usedLimitAmount"]) -> MetaOapg.properties.usedLimitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remainingLimitAmount"]) -> MetaOapg.properties.remainingLimitAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["partnerId", "partnerName", "legalForm", "yearEstablished", "address", "houseNumber", "zip", "city", "phone", "iban", "numberOfLoans", "allowedLimitAmount", "usedLimitAmount", "remainingLimitAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerId"]) -> typing.Union[MetaOapg.properties.partnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerName"]) -> typing.Union[MetaOapg.properties.partnerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalForm"]) -> typing.Union[MetaOapg.properties.legalForm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearEstablished"]) -> typing.Union[MetaOapg.properties.yearEstablished, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["houseNumber"]) -> typing.Union[MetaOapg.properties.houseNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iban"]) -> typing.Union[MetaOapg.properties.iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfLoans"]) -> typing.Union[MetaOapg.properties.numberOfLoans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedLimitAmount"]) -> typing.Union[MetaOapg.properties.allowedLimitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usedLimitAmount"]) -> typing.Union[MetaOapg.properties.usedLimitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remainingLimitAmount"]) -> typing.Union[MetaOapg.properties.remainingLimitAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["partnerId", "partnerName", "legalForm", "yearEstablished", "address", "houseNumber", "zip", "city", "phone", "iban", "numberOfLoans", "allowedLimitAmount", "usedLimitAmount", "remainingLimitAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        partnerId: typing.Union[MetaOapg.properties.partnerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        partnerName: typing.Union[MetaOapg.properties.partnerName, None, str, schemas.Unset] = schemas.unset,
        legalForm: typing.Union[MetaOapg.properties.legalForm, None, str, schemas.Unset] = schemas.unset,
        yearEstablished: typing.Union[MetaOapg.properties.yearEstablished, None, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, None, str, schemas.Unset] = schemas.unset,
        houseNumber: typing.Union[MetaOapg.properties.houseNumber, None, str, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, None, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, None, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, None, str, schemas.Unset] = schemas.unset,
        iban: typing.Union[MetaOapg.properties.iban, None, str, schemas.Unset] = schemas.unset,
        numberOfLoans: typing.Union[MetaOapg.properties.numberOfLoans, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allowedLimitAmount: typing.Union[MetaOapg.properties.allowedLimitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usedLimitAmount: typing.Union[MetaOapg.properties.usedLimitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        remainingLimitAmount: typing.Union[MetaOapg.properties.remainingLimitAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntermediaryPartner':
        return super().__new__(
            cls,
            *args,
            partnerId=partnerId,
            partnerName=partnerName,
            legalForm=legalForm,
            yearEstablished=yearEstablished,
            address=address,
            houseNumber=houseNumber,
            zip=zip,
            city=city,
            phone=phone,
            iban=iban,
            numberOfLoans=numberOfLoans,
            allowedLimitAmount=allowedLimitAmount,
            usedLimitAmount=usedLimitAmount,
            remainingLimitAmount=remainingLimitAmount,
            _configuration=_configuration,
            **kwargs,
        )
