# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class ConnectorReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Report of investments of connected investors related to a connector
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def connectorSummary() -> typing.Type['ConnectorSummary']:
                return ConnectorSummary
            
            
            class connectorInvestments(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConnectorInvestment']:
                        return ConnectorInvestment
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'connectorInvestments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "connectorSummary": connectorSummary,
                "connectorInvestments": connectorInvestments,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectorSummary"]) -> 'ConnectorSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectorInvestments"]) -> MetaOapg.properties.connectorInvestments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connectorSummary", "connectorInvestments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectorSummary"]) -> typing.Union['ConnectorSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectorInvestments"]) -> typing.Union[MetaOapg.properties.connectorInvestments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connectorSummary", "connectorInvestments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        connectorSummary: typing.Union['ConnectorSummary', schemas.Unset] = schemas.unset,
        connectorInvestments: typing.Union[MetaOapg.properties.connectorInvestments, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectorReport':
        return super().__new__(
            cls,
            *args,
            connectorSummary=connectorSummary,
            connectorInvestments=connectorInvestments,
            _configuration=_configuration,
            **kwargs,
        )

from crowd_4_cash_python_sdk.model.connector_investment import ConnectorInvestment
from crowd_4_cash_python_sdk.model.connector_summary import ConnectorSummary
