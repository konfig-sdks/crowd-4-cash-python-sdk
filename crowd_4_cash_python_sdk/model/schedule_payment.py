# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class SchedulePayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information regarding each monthly payment
    """


    class MetaOapg:
        
        class properties:
            annuityNumber = schemas.Int32Schema
            
            
            class annuityDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annuityDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            annuityAmount = schemas.Float64Schema
            principalPortion = schemas.Float64Schema
            interestPortion = schemas.Float64Schema
            insuranceFee = schemas.Float64Schema
            administrativeFee = schemas.Float64Schema
            commissionPortion = schemas.Float64Schema
            netIncome = schemas.Float64Schema
            principalBalance = schemas.Float64Schema
            
            
            class annuityStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annuityStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isPaid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isPaid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class datePaid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'datePaid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class note(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'note':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "annuityNumber": annuityNumber,
                "annuityDate": annuityDate,
                "annuityAmount": annuityAmount,
                "principalPortion": principalPortion,
                "interestPortion": interestPortion,
                "insuranceFee": insuranceFee,
                "administrativeFee": administrativeFee,
                "commissionPortion": commissionPortion,
                "netIncome": netIncome,
                "principalBalance": principalBalance,
                "annuityStatus": annuityStatus,
                "isPaid": isPaid,
                "datePaid": datePaid,
                "note": note,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annuityNumber"]) -> MetaOapg.properties.annuityNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annuityDate"]) -> MetaOapg.properties.annuityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annuityAmount"]) -> MetaOapg.properties.annuityAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["principalPortion"]) -> MetaOapg.properties.principalPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestPortion"]) -> MetaOapg.properties.interestPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insuranceFee"]) -> MetaOapg.properties.insuranceFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administrativeFee"]) -> MetaOapg.properties.administrativeFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commissionPortion"]) -> MetaOapg.properties.commissionPortion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netIncome"]) -> MetaOapg.properties.netIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["principalBalance"]) -> MetaOapg.properties.principalBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annuityStatus"]) -> MetaOapg.properties.annuityStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPaid"]) -> MetaOapg.properties.isPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datePaid"]) -> MetaOapg.properties.datePaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annuityNumber", "annuityDate", "annuityAmount", "principalPortion", "interestPortion", "insuranceFee", "administrativeFee", "commissionPortion", "netIncome", "principalBalance", "annuityStatus", "isPaid", "datePaid", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annuityNumber"]) -> typing.Union[MetaOapg.properties.annuityNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annuityDate"]) -> typing.Union[MetaOapg.properties.annuityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annuityAmount"]) -> typing.Union[MetaOapg.properties.annuityAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["principalPortion"]) -> typing.Union[MetaOapg.properties.principalPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestPortion"]) -> typing.Union[MetaOapg.properties.interestPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insuranceFee"]) -> typing.Union[MetaOapg.properties.insuranceFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administrativeFee"]) -> typing.Union[MetaOapg.properties.administrativeFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commissionPortion"]) -> typing.Union[MetaOapg.properties.commissionPortion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netIncome"]) -> typing.Union[MetaOapg.properties.netIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["principalBalance"]) -> typing.Union[MetaOapg.properties.principalBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annuityStatus"]) -> typing.Union[MetaOapg.properties.annuityStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPaid"]) -> typing.Union[MetaOapg.properties.isPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datePaid"]) -> typing.Union[MetaOapg.properties.datePaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annuityNumber", "annuityDate", "annuityAmount", "principalPortion", "interestPortion", "insuranceFee", "administrativeFee", "commissionPortion", "netIncome", "principalBalance", "annuityStatus", "isPaid", "datePaid", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        annuityNumber: typing.Union[MetaOapg.properties.annuityNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        annuityDate: typing.Union[MetaOapg.properties.annuityDate, None, str, schemas.Unset] = schemas.unset,
        annuityAmount: typing.Union[MetaOapg.properties.annuityAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        principalPortion: typing.Union[MetaOapg.properties.principalPortion, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        interestPortion: typing.Union[MetaOapg.properties.interestPortion, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        insuranceFee: typing.Union[MetaOapg.properties.insuranceFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        administrativeFee: typing.Union[MetaOapg.properties.administrativeFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        commissionPortion: typing.Union[MetaOapg.properties.commissionPortion, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netIncome: typing.Union[MetaOapg.properties.netIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        principalBalance: typing.Union[MetaOapg.properties.principalBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        annuityStatus: typing.Union[MetaOapg.properties.annuityStatus, None, str, schemas.Unset] = schemas.unset,
        isPaid: typing.Union[MetaOapg.properties.isPaid, None, str, schemas.Unset] = schemas.unset,
        datePaid: typing.Union[MetaOapg.properties.datePaid, None, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchedulePayment':
        return super().__new__(
            cls,
            *args,
            annuityNumber=annuityNumber,
            annuityDate=annuityDate,
            annuityAmount=annuityAmount,
            principalPortion=principalPortion,
            interestPortion=interestPortion,
            insuranceFee=insuranceFee,
            administrativeFee=administrativeFee,
            commissionPortion=commissionPortion,
            netIncome=netIncome,
            principalBalance=principalBalance,
            annuityStatus=annuityStatus,
            isPaid=isPaid,
            datePaid=datePaid,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )
