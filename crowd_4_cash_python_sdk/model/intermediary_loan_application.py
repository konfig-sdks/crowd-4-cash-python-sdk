# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class IntermediaryLoanApplication(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A loan application that is submitted by the intermediary company on behalf of their partner(s)
    """


    class MetaOapg:
        required = {
            "serialNumber",
            "identificationNumber",
        }
        
        class properties:
            
            
            class serialNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 17
                    min_length = 17
            
            
            class identificationNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 11
                    min_length = 9
            partnerId = schemas.Int32Schema
            
            
            class purchaseItem(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchaseItem':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemBrand(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemBrand':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemModel(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemModel':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemColor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemColor':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            itemMarketValue = schemas.Float64Schema
            
            
            class manufactureDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'manufactureDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstRegistration(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstRegistration':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mileage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mileage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class itemCertificate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'itemCertificate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            rentalAmount = schemas.Float64Schema
            
            
            class handoverDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'handoverDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "serialNumber": serialNumber,
                "identificationNumber": identificationNumber,
                "partnerId": partnerId,
                "purchaseItem": purchaseItem,
                "itemStatus": itemStatus,
                "itemName": itemName,
                "itemType": itemType,
                "itemBrand": itemBrand,
                "itemModel": itemModel,
                "itemColor": itemColor,
                "itemMarketValue": itemMarketValue,
                "manufactureDate": manufactureDate,
                "firstRegistration": firstRegistration,
                "mileage": mileage,
                "itemCertificate": itemCertificate,
                "rentalAmount": rentalAmount,
                "handoverDate": handoverDate,
            }
    
    serialNumber: MetaOapg.properties.serialNumber
    identificationNumber: MetaOapg.properties.identificationNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serialNumber"]) -> MetaOapg.properties.serialNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identificationNumber"]) -> MetaOapg.properties.identificationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerId"]) -> MetaOapg.properties.partnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseItem"]) -> MetaOapg.properties.purchaseItem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemStatus"]) -> MetaOapg.properties.itemStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemName"]) -> MetaOapg.properties.itemName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemType"]) -> MetaOapg.properties.itemType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemBrand"]) -> MetaOapg.properties.itemBrand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemModel"]) -> MetaOapg.properties.itemModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemColor"]) -> MetaOapg.properties.itemColor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemMarketValue"]) -> MetaOapg.properties.itemMarketValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manufactureDate"]) -> MetaOapg.properties.manufactureDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstRegistration"]) -> MetaOapg.properties.firstRegistration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mileage"]) -> MetaOapg.properties.mileage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemCertificate"]) -> MetaOapg.properties.itemCertificate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rentalAmount"]) -> MetaOapg.properties.rentalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["handoverDate"]) -> MetaOapg.properties.handoverDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["serialNumber", "identificationNumber", "partnerId", "purchaseItem", "itemStatus", "itemName", "itemType", "itemBrand", "itemModel", "itemColor", "itemMarketValue", "manufactureDate", "firstRegistration", "mileage", "itemCertificate", "rentalAmount", "handoverDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serialNumber"]) -> MetaOapg.properties.serialNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identificationNumber"]) -> MetaOapg.properties.identificationNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerId"]) -> typing.Union[MetaOapg.properties.partnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseItem"]) -> typing.Union[MetaOapg.properties.purchaseItem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemStatus"]) -> typing.Union[MetaOapg.properties.itemStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemName"]) -> typing.Union[MetaOapg.properties.itemName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemType"]) -> typing.Union[MetaOapg.properties.itemType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemBrand"]) -> typing.Union[MetaOapg.properties.itemBrand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemModel"]) -> typing.Union[MetaOapg.properties.itemModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemColor"]) -> typing.Union[MetaOapg.properties.itemColor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemMarketValue"]) -> typing.Union[MetaOapg.properties.itemMarketValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manufactureDate"]) -> typing.Union[MetaOapg.properties.manufactureDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstRegistration"]) -> typing.Union[MetaOapg.properties.firstRegistration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mileage"]) -> typing.Union[MetaOapg.properties.mileage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemCertificate"]) -> typing.Union[MetaOapg.properties.itemCertificate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rentalAmount"]) -> typing.Union[MetaOapg.properties.rentalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["handoverDate"]) -> typing.Union[MetaOapg.properties.handoverDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["serialNumber", "identificationNumber", "partnerId", "purchaseItem", "itemStatus", "itemName", "itemType", "itemBrand", "itemModel", "itemColor", "itemMarketValue", "manufactureDate", "firstRegistration", "mileage", "itemCertificate", "rentalAmount", "handoverDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        serialNumber: typing.Union[MetaOapg.properties.serialNumber, str, ],
        identificationNumber: typing.Union[MetaOapg.properties.identificationNumber, str, ],
        partnerId: typing.Union[MetaOapg.properties.partnerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchaseItem: typing.Union[MetaOapg.properties.purchaseItem, None, str, schemas.Unset] = schemas.unset,
        itemStatus: typing.Union[MetaOapg.properties.itemStatus, None, str, schemas.Unset] = schemas.unset,
        itemName: typing.Union[MetaOapg.properties.itemName, None, str, schemas.Unset] = schemas.unset,
        itemType: typing.Union[MetaOapg.properties.itemType, None, str, schemas.Unset] = schemas.unset,
        itemBrand: typing.Union[MetaOapg.properties.itemBrand, None, str, schemas.Unset] = schemas.unset,
        itemModel: typing.Union[MetaOapg.properties.itemModel, None, str, schemas.Unset] = schemas.unset,
        itemColor: typing.Union[MetaOapg.properties.itemColor, None, str, schemas.Unset] = schemas.unset,
        itemMarketValue: typing.Union[MetaOapg.properties.itemMarketValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        manufactureDate: typing.Union[MetaOapg.properties.manufactureDate, None, str, schemas.Unset] = schemas.unset,
        firstRegistration: typing.Union[MetaOapg.properties.firstRegistration, None, str, schemas.Unset] = schemas.unset,
        mileage: typing.Union[MetaOapg.properties.mileage, None, str, schemas.Unset] = schemas.unset,
        itemCertificate: typing.Union[MetaOapg.properties.itemCertificate, None, str, schemas.Unset] = schemas.unset,
        rentalAmount: typing.Union[MetaOapg.properties.rentalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        handoverDate: typing.Union[MetaOapg.properties.handoverDate, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntermediaryLoanApplication':
        return super().__new__(
            cls,
            *args,
            serialNumber=serialNumber,
            identificationNumber=identificationNumber,
            partnerId=partnerId,
            purchaseItem=purchaseItem,
            itemStatus=itemStatus,
            itemName=itemName,
            itemType=itemType,
            itemBrand=itemBrand,
            itemModel=itemModel,
            itemColor=itemColor,
            itemMarketValue=itemMarketValue,
            manufactureDate=manufactureDate,
            firstRegistration=firstRegistration,
            mileage=mileage,
            itemCertificate=itemCertificate,
            rentalAmount=rentalAmount,
            handoverDate=handoverDate,
            _configuration=_configuration,
            **kwargs,
        )
