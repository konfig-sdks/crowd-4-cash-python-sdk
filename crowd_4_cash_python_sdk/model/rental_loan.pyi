# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class RentalLoan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A loan that was made on behalf of your partner
    """


    class MetaOapg:
        
        class properties:
            loanId = schemas.Int32Schema
            renteeId = schemas.Int32Schema
            
            
            class firstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateCreated(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateCreated':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateApproved(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateApproved':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            loanAmount = schemas.Float64Schema
            interestRate = schemas.Float64Schema
            duration = schemas.Int32Schema
            
            
            class loanRating(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanRating':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loanStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastPaymentDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastPaymentDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class performanceStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'performanceStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            daysLate = schemas.Int32Schema
            
            
            class collateral(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collateral':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class collateralType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collateralType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class insurance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'insurance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            totalPrincipalRemaining = schemas.Float64Schema
            numberOfUnpaidAnnuities = schemas.Int32Schema
            totalRepaidPrincipal = schemas.Float64Schema
            totalRepaidInterest = schemas.Float64Schema
            
            
            class disbursementDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disbursementDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class maturityDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maturityDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "loanId": loanId,
                "renteeId": renteeId,
                "firstName": firstName,
                "lastName": lastName,
                "dateCreated": dateCreated,
                "dateApproved": dateApproved,
                "loanAmount": loanAmount,
                "interestRate": interestRate,
                "duration": duration,
                "loanRating": loanRating,
                "loanStatus": loanStatus,
                "lastPaymentDate": lastPaymentDate,
                "performanceStatus": performanceStatus,
                "daysLate": daysLate,
                "collateral": collateral,
                "collateralType": collateralType,
                "insurance": insurance,
                "totalPrincipalRemaining": totalPrincipalRemaining,
                "numberOfUnpaidAnnuities": numberOfUnpaidAnnuities,
                "totalRepaidPrincipal": totalRepaidPrincipal,
                "totalRepaidInterest": totalRepaidInterest,
                "disbursementDate": disbursementDate,
                "maturityDate": maturityDate,
                "notes": notes,
                "link": link,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanId"]) -> MetaOapg.properties.loanId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renteeId"]) -> MetaOapg.properties.renteeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateApproved"]) -> MetaOapg.properties.dateApproved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanAmount"]) -> MetaOapg.properties.loanAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestRate"]) -> MetaOapg.properties.interestRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanRating"]) -> MetaOapg.properties.loanRating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanStatus"]) -> MetaOapg.properties.loanStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPaymentDate"]) -> MetaOapg.properties.lastPaymentDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performanceStatus"]) -> MetaOapg.properties.performanceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysLate"]) -> MetaOapg.properties.daysLate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collateral"]) -> MetaOapg.properties.collateral: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collateralType"]) -> MetaOapg.properties.collateralType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance"]) -> MetaOapg.properties.insurance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPrincipalRemaining"]) -> MetaOapg.properties.totalPrincipalRemaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfUnpaidAnnuities"]) -> MetaOapg.properties.numberOfUnpaidAnnuities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRepaidPrincipal"]) -> MetaOapg.properties.totalRepaidPrincipal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRepaidInterest"]) -> MetaOapg.properties.totalRepaidInterest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disbursementDate"]) -> MetaOapg.properties.disbursementDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maturityDate"]) -> MetaOapg.properties.maturityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["loanId", "renteeId", "firstName", "lastName", "dateCreated", "dateApproved", "loanAmount", "interestRate", "duration", "loanRating", "loanStatus", "lastPaymentDate", "performanceStatus", "daysLate", "collateral", "collateralType", "insurance", "totalPrincipalRemaining", "numberOfUnpaidAnnuities", "totalRepaidPrincipal", "totalRepaidInterest", "disbursementDate", "maturityDate", "notes", "link", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanId"]) -> typing.Union[MetaOapg.properties.loanId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renteeId"]) -> typing.Union[MetaOapg.properties.renteeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateApproved"]) -> typing.Union[MetaOapg.properties.dateApproved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanAmount"]) -> typing.Union[MetaOapg.properties.loanAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestRate"]) -> typing.Union[MetaOapg.properties.interestRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanRating"]) -> typing.Union[MetaOapg.properties.loanRating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanStatus"]) -> typing.Union[MetaOapg.properties.loanStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPaymentDate"]) -> typing.Union[MetaOapg.properties.lastPaymentDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performanceStatus"]) -> typing.Union[MetaOapg.properties.performanceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysLate"]) -> typing.Union[MetaOapg.properties.daysLate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collateral"]) -> typing.Union[MetaOapg.properties.collateral, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collateralType"]) -> typing.Union[MetaOapg.properties.collateralType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance"]) -> typing.Union[MetaOapg.properties.insurance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPrincipalRemaining"]) -> typing.Union[MetaOapg.properties.totalPrincipalRemaining, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfUnpaidAnnuities"]) -> typing.Union[MetaOapg.properties.numberOfUnpaidAnnuities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRepaidPrincipal"]) -> typing.Union[MetaOapg.properties.totalRepaidPrincipal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRepaidInterest"]) -> typing.Union[MetaOapg.properties.totalRepaidInterest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disbursementDate"]) -> typing.Union[MetaOapg.properties.disbursementDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maturityDate"]) -> typing.Union[MetaOapg.properties.maturityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["loanId", "renteeId", "firstName", "lastName", "dateCreated", "dateApproved", "loanAmount", "interestRate", "duration", "loanRating", "loanStatus", "lastPaymentDate", "performanceStatus", "daysLate", "collateral", "collateralType", "insurance", "totalPrincipalRemaining", "numberOfUnpaidAnnuities", "totalRepaidPrincipal", "totalRepaidInterest", "disbursementDate", "maturityDate", "notes", "link", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        loanId: typing.Union[MetaOapg.properties.loanId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        renteeId: typing.Union[MetaOapg.properties.renteeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, None, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, None, str, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, None, str, schemas.Unset] = schemas.unset,
        dateApproved: typing.Union[MetaOapg.properties.dateApproved, None, str, schemas.Unset] = schemas.unset,
        loanAmount: typing.Union[MetaOapg.properties.loanAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        interestRate: typing.Union[MetaOapg.properties.interestRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        loanRating: typing.Union[MetaOapg.properties.loanRating, None, str, schemas.Unset] = schemas.unset,
        loanStatus: typing.Union[MetaOapg.properties.loanStatus, None, str, schemas.Unset] = schemas.unset,
        lastPaymentDate: typing.Union[MetaOapg.properties.lastPaymentDate, None, str, schemas.Unset] = schemas.unset,
        performanceStatus: typing.Union[MetaOapg.properties.performanceStatus, None, str, schemas.Unset] = schemas.unset,
        daysLate: typing.Union[MetaOapg.properties.daysLate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        collateral: typing.Union[MetaOapg.properties.collateral, None, str, schemas.Unset] = schemas.unset,
        collateralType: typing.Union[MetaOapg.properties.collateralType, None, str, schemas.Unset] = schemas.unset,
        insurance: typing.Union[MetaOapg.properties.insurance, None, str, schemas.Unset] = schemas.unset,
        totalPrincipalRemaining: typing.Union[MetaOapg.properties.totalPrincipalRemaining, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        numberOfUnpaidAnnuities: typing.Union[MetaOapg.properties.numberOfUnpaidAnnuities, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalRepaidPrincipal: typing.Union[MetaOapg.properties.totalRepaidPrincipal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalRepaidInterest: typing.Union[MetaOapg.properties.totalRepaidInterest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        disbursementDate: typing.Union[MetaOapg.properties.disbursementDate, None, str, schemas.Unset] = schemas.unset,
        maturityDate: typing.Union[MetaOapg.properties.maturityDate, None, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RentalLoan':
        return super().__new__(
            cls,
            *args,
            loanId=loanId,
            renteeId=renteeId,
            firstName=firstName,
            lastName=lastName,
            dateCreated=dateCreated,
            dateApproved=dateApproved,
            loanAmount=loanAmount,
            interestRate=interestRate,
            duration=duration,
            loanRating=loanRating,
            loanStatus=loanStatus,
            lastPaymentDate=lastPaymentDate,
            performanceStatus=performanceStatus,
            daysLate=daysLate,
            collateral=collateral,
            collateralType=collateralType,
            insurance=insurance,
            totalPrincipalRemaining=totalPrincipalRemaining,
            numberOfUnpaidAnnuities=numberOfUnpaidAnnuities,
            totalRepaidPrincipal=totalRepaidPrincipal,
            totalRepaidInterest=totalRepaidInterest,
            disbursementDate=disbursementDate,
            maturityDate=maturityDate,
            notes=notes,
            link=link,
            _configuration=_configuration,
            **kwargs,
        )
