# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class ConnectorInvestment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An investment made by the connector on behalf of connected investor
    """


    class MetaOapg:
        
        class properties:
            investorId = schemas.Int32Schema
            
            
            class investorName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'investorName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            bidAmount = schemas.Float64Schema
            
            
            class bidDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bidDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            loanId = schemas.Int32Schema
            loanAmount = schemas.Float64Schema
            loanDuration = schemas.Int32Schema
            loanInterest = schemas.Float64Schema
            
            
            class loanRating(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanRating':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "investorId": investorId,
                "investorName": investorName,
                "bidAmount": bidAmount,
                "bidDate": bidDate,
                "loanId": loanId,
                "loanAmount": loanAmount,
                "loanDuration": loanDuration,
                "loanInterest": loanInterest,
                "loanRating": loanRating,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investorId"]) -> MetaOapg.properties.investorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investorName"]) -> MetaOapg.properties.investorName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bidAmount"]) -> MetaOapg.properties.bidAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bidDate"]) -> MetaOapg.properties.bidDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanId"]) -> MetaOapg.properties.loanId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanAmount"]) -> MetaOapg.properties.loanAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanDuration"]) -> MetaOapg.properties.loanDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanInterest"]) -> MetaOapg.properties.loanInterest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanRating"]) -> MetaOapg.properties.loanRating: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["investorId", "investorName", "bidAmount", "bidDate", "loanId", "loanAmount", "loanDuration", "loanInterest", "loanRating", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investorId"]) -> typing.Union[MetaOapg.properties.investorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investorName"]) -> typing.Union[MetaOapg.properties.investorName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bidAmount"]) -> typing.Union[MetaOapg.properties.bidAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bidDate"]) -> typing.Union[MetaOapg.properties.bidDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanId"]) -> typing.Union[MetaOapg.properties.loanId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanAmount"]) -> typing.Union[MetaOapg.properties.loanAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanDuration"]) -> typing.Union[MetaOapg.properties.loanDuration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanInterest"]) -> typing.Union[MetaOapg.properties.loanInterest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanRating"]) -> typing.Union[MetaOapg.properties.loanRating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["investorId", "investorName", "bidAmount", "bidDate", "loanId", "loanAmount", "loanDuration", "loanInterest", "loanRating", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        investorId: typing.Union[MetaOapg.properties.investorId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        investorName: typing.Union[MetaOapg.properties.investorName, None, str, schemas.Unset] = schemas.unset,
        bidAmount: typing.Union[MetaOapg.properties.bidAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bidDate: typing.Union[MetaOapg.properties.bidDate, None, str, schemas.Unset] = schemas.unset,
        loanId: typing.Union[MetaOapg.properties.loanId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        loanAmount: typing.Union[MetaOapg.properties.loanAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        loanDuration: typing.Union[MetaOapg.properties.loanDuration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        loanInterest: typing.Union[MetaOapg.properties.loanInterest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        loanRating: typing.Union[MetaOapg.properties.loanRating, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectorInvestment':
        return super().__new__(
            cls,
            *args,
            investorId=investorId,
            investorName=investorName,
            bidAmount=bidAmount,
            bidDate=bidDate,
            loanId=loanId,
            loanAmount=loanAmount,
            loanDuration=loanDuration,
            loanInterest=loanInterest,
            loanRating=loanRating,
            _configuration=_configuration,
            **kwargs,
        )
