# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class Income(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Monthly income of the borrower
    """


    class MetaOapg:
        
        class properties:
            
            
            class profession(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'profession':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employmentType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employmentType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employmentRelationshipUnderNotice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employmentRelationshipUnderNotice':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class workSince(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workSince':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            numberOfSalaries = schemas.Int32Schema
            monthlyNetIncome = schemas.Float64Schema
            bonusAverage = schemas.Float64Schema
            
            
            class additionalIncome(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalIncome':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class additionalIncomeType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalIncomeType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            additionalIncomeAmount = schemas.Float64Schema
            
            
            class partnerIncome(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partnerIncome':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class partnerProfession(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partnerProfession':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class partnerWorkSince(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partnerWorkSince':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            partnerNumberOfSalaries = schemas.Int32Schema
            partnerMonthlyNetIncome = schemas.Float64Schema
            partnerBonusAverage = schemas.Float64Schema
            __annotations__ = {
                "profession": profession,
                "employmentType": employmentType,
                "employmentRelationshipUnderNotice": employmentRelationshipUnderNotice,
                "workSince": workSince,
                "numberOfSalaries": numberOfSalaries,
                "monthlyNetIncome": monthlyNetIncome,
                "bonusAverage": bonusAverage,
                "additionalIncome": additionalIncome,
                "additionalIncomeType": additionalIncomeType,
                "additionalIncomeAmount": additionalIncomeAmount,
                "partnerIncome": partnerIncome,
                "partnerProfession": partnerProfession,
                "partnerWorkSince": partnerWorkSince,
                "partnerNumberOfSalaries": partnerNumberOfSalaries,
                "partnerMonthlyNetIncome": partnerMonthlyNetIncome,
                "partnerBonusAverage": partnerBonusAverage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profession"]) -> MetaOapg.properties.profession: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentType"]) -> MetaOapg.properties.employmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentRelationshipUnderNotice"]) -> MetaOapg.properties.employmentRelationshipUnderNotice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workSince"]) -> MetaOapg.properties.workSince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfSalaries"]) -> MetaOapg.properties.numberOfSalaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyNetIncome"]) -> MetaOapg.properties.monthlyNetIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonusAverage"]) -> MetaOapg.properties.bonusAverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalIncome"]) -> MetaOapg.properties.additionalIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalIncomeType"]) -> MetaOapg.properties.additionalIncomeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalIncomeAmount"]) -> MetaOapg.properties.additionalIncomeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerIncome"]) -> MetaOapg.properties.partnerIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerProfession"]) -> MetaOapg.properties.partnerProfession: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerWorkSince"]) -> MetaOapg.properties.partnerWorkSince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerNumberOfSalaries"]) -> MetaOapg.properties.partnerNumberOfSalaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerMonthlyNetIncome"]) -> MetaOapg.properties.partnerMonthlyNetIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerBonusAverage"]) -> MetaOapg.properties.partnerBonusAverage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["profession", "employmentType", "employmentRelationshipUnderNotice", "workSince", "numberOfSalaries", "monthlyNetIncome", "bonusAverage", "additionalIncome", "additionalIncomeType", "additionalIncomeAmount", "partnerIncome", "partnerProfession", "partnerWorkSince", "partnerNumberOfSalaries", "partnerMonthlyNetIncome", "partnerBonusAverage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profession"]) -> typing.Union[MetaOapg.properties.profession, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentType"]) -> typing.Union[MetaOapg.properties.employmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentRelationshipUnderNotice"]) -> typing.Union[MetaOapg.properties.employmentRelationshipUnderNotice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workSince"]) -> typing.Union[MetaOapg.properties.workSince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfSalaries"]) -> typing.Union[MetaOapg.properties.numberOfSalaries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyNetIncome"]) -> typing.Union[MetaOapg.properties.monthlyNetIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonusAverage"]) -> typing.Union[MetaOapg.properties.bonusAverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalIncome"]) -> typing.Union[MetaOapg.properties.additionalIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalIncomeType"]) -> typing.Union[MetaOapg.properties.additionalIncomeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalIncomeAmount"]) -> typing.Union[MetaOapg.properties.additionalIncomeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerIncome"]) -> typing.Union[MetaOapg.properties.partnerIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerProfession"]) -> typing.Union[MetaOapg.properties.partnerProfession, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerWorkSince"]) -> typing.Union[MetaOapg.properties.partnerWorkSince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerNumberOfSalaries"]) -> typing.Union[MetaOapg.properties.partnerNumberOfSalaries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerMonthlyNetIncome"]) -> typing.Union[MetaOapg.properties.partnerMonthlyNetIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerBonusAverage"]) -> typing.Union[MetaOapg.properties.partnerBonusAverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["profession", "employmentType", "employmentRelationshipUnderNotice", "workSince", "numberOfSalaries", "monthlyNetIncome", "bonusAverage", "additionalIncome", "additionalIncomeType", "additionalIncomeAmount", "partnerIncome", "partnerProfession", "partnerWorkSince", "partnerNumberOfSalaries", "partnerMonthlyNetIncome", "partnerBonusAverage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        profession: typing.Union[MetaOapg.properties.profession, None, str, schemas.Unset] = schemas.unset,
        employmentType: typing.Union[MetaOapg.properties.employmentType, None, str, schemas.Unset] = schemas.unset,
        employmentRelationshipUnderNotice: typing.Union[MetaOapg.properties.employmentRelationshipUnderNotice, None, str, schemas.Unset] = schemas.unset,
        workSince: typing.Union[MetaOapg.properties.workSince, None, str, schemas.Unset] = schemas.unset,
        numberOfSalaries: typing.Union[MetaOapg.properties.numberOfSalaries, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        monthlyNetIncome: typing.Union[MetaOapg.properties.monthlyNetIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bonusAverage: typing.Union[MetaOapg.properties.bonusAverage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        additionalIncome: typing.Union[MetaOapg.properties.additionalIncome, None, str, schemas.Unset] = schemas.unset,
        additionalIncomeType: typing.Union[MetaOapg.properties.additionalIncomeType, None, str, schemas.Unset] = schemas.unset,
        additionalIncomeAmount: typing.Union[MetaOapg.properties.additionalIncomeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        partnerIncome: typing.Union[MetaOapg.properties.partnerIncome, None, str, schemas.Unset] = schemas.unset,
        partnerProfession: typing.Union[MetaOapg.properties.partnerProfession, None, str, schemas.Unset] = schemas.unset,
        partnerWorkSince: typing.Union[MetaOapg.properties.partnerWorkSince, None, str, schemas.Unset] = schemas.unset,
        partnerNumberOfSalaries: typing.Union[MetaOapg.properties.partnerNumberOfSalaries, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        partnerMonthlyNetIncome: typing.Union[MetaOapg.properties.partnerMonthlyNetIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        partnerBonusAverage: typing.Union[MetaOapg.properties.partnerBonusAverage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Income':
        return super().__new__(
            cls,
            *args,
            profession=profession,
            employmentType=employmentType,
            employmentRelationshipUnderNotice=employmentRelationshipUnderNotice,
            workSince=workSince,
            numberOfSalaries=numberOfSalaries,
            monthlyNetIncome=monthlyNetIncome,
            bonusAverage=bonusAverage,
            additionalIncome=additionalIncome,
            additionalIncomeType=additionalIncomeType,
            additionalIncomeAmount=additionalIncomeAmount,
            partnerIncome=partnerIncome,
            partnerProfession=partnerProfession,
            partnerWorkSince=partnerWorkSince,
            partnerNumberOfSalaries=partnerNumberOfSalaries,
            partnerMonthlyNetIncome=partnerMonthlyNetIncome,
            partnerBonusAverage=partnerBonusAverage,
            _configuration=_configuration,
            **kwargs,
        )
