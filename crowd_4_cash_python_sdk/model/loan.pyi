# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class Loan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Loan entity
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int32Schema
            
            
            class dateCreated(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateCreated':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateApproved(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateApproved':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            loanAmount = schemas.Float64Schema
            
            
            class lastPaymentDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastPaymentDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            interestRate = schemas.Float64Schema
            
            
            class paymentFrequency(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentFrequency':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            duration = schemas.Int32Schema
            
            
            class borrowerType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'borrowerType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class biddingType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'biddingType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loanType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loanPurpose(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanPurpose':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loanRating(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanRating':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loanStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loanStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class performanceStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'performanceStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            daysLate = schemas.Int32Schema
            
            
            class collateral(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collateral':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class collateralType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collateralType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class insurance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'insurance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            totalPrincipalRemaining = schemas.Float64Schema
            totalRepaidPrincipal = schemas.Float64Schema
            totalRepaidInterest = schemas.Float64Schema
            
            
            class biddingEnd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'biddingEnd':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            disbursementDate = schemas.DateTimeSchema
            maturityDate = schemas.DateTimeSchema
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bids(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ActiveBid']:
                        return ActiveBid
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bids':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def borrowerPrivate() -> typing.Type['Private']:
                return Private
        
            @staticmethod
            def borrowerCompany() -> typing.Type['Company']:
                return Company
        
            @staticmethod
            def income() -> typing.Type['Income']:
                return Income
        
            @staticmethod
            def expenses() -> typing.Type['Expenses']:
                return Expenses
        
            @staticmethod
            def crif() -> typing.Type['Crif']:
                return Crif
        
            @staticmethod
            def questionnaire() -> typing.Type['Questionnaire']:
                return Questionnaire
        
            @staticmethod
            def financial() -> typing.Type['Financial']:
                return Financial
        
            @staticmethod
            def amortizationSchedule() -> typing.Type['AmortizationSchedule']:
                return AmortizationSchedule
        
            @staticmethod
            def accountStatement() -> typing.Type['AccountStatement']:
                return AccountStatement
        
            @staticmethod
            def technicalData() -> typing.Type['TechnicalData']:
                return TechnicalData
            __annotations__ = {
                "id": id,
                "dateCreated": dateCreated,
                "dateApproved": dateApproved,
                "loanAmount": loanAmount,
                "lastPaymentDate": lastPaymentDate,
                "interestRate": interestRate,
                "paymentFrequency": paymentFrequency,
                "duration": duration,
                "borrowerType": borrowerType,
                "biddingType": biddingType,
                "loanType": loanType,
                "loanPurpose": loanPurpose,
                "loanRating": loanRating,
                "loanStatus": loanStatus,
                "performanceStatus": performanceStatus,
                "daysLate": daysLate,
                "collateral": collateral,
                "collateralType": collateralType,
                "insurance": insurance,
                "totalPrincipalRemaining": totalPrincipalRemaining,
                "totalRepaidPrincipal": totalRepaidPrincipal,
                "totalRepaidInterest": totalRepaidInterest,
                "biddingEnd": biddingEnd,
                "disbursementDate": disbursementDate,
                "maturityDate": maturityDate,
                "notes": notes,
                "link": link,
                "bids": bids,
                "borrowerPrivate": borrowerPrivate,
                "borrowerCompany": borrowerCompany,
                "income": income,
                "expenses": expenses,
                "crif": crif,
                "questionnaire": questionnaire,
                "financial": financial,
                "amortizationSchedule": amortizationSchedule,
                "accountStatement": accountStatement,
                "technicalData": technicalData,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateApproved"]) -> MetaOapg.properties.dateApproved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanAmount"]) -> MetaOapg.properties.loanAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPaymentDate"]) -> MetaOapg.properties.lastPaymentDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestRate"]) -> MetaOapg.properties.interestRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentFrequency"]) -> MetaOapg.properties.paymentFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borrowerType"]) -> MetaOapg.properties.borrowerType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["biddingType"]) -> MetaOapg.properties.biddingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanType"]) -> MetaOapg.properties.loanType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanPurpose"]) -> MetaOapg.properties.loanPurpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanRating"]) -> MetaOapg.properties.loanRating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanStatus"]) -> MetaOapg.properties.loanStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performanceStatus"]) -> MetaOapg.properties.performanceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysLate"]) -> MetaOapg.properties.daysLate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collateral"]) -> MetaOapg.properties.collateral: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collateralType"]) -> MetaOapg.properties.collateralType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance"]) -> MetaOapg.properties.insurance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPrincipalRemaining"]) -> MetaOapg.properties.totalPrincipalRemaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRepaidPrincipal"]) -> MetaOapg.properties.totalRepaidPrincipal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRepaidInterest"]) -> MetaOapg.properties.totalRepaidInterest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["biddingEnd"]) -> MetaOapg.properties.biddingEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disbursementDate"]) -> MetaOapg.properties.disbursementDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maturityDate"]) -> MetaOapg.properties.maturityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bids"]) -> MetaOapg.properties.bids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borrowerPrivate"]) -> 'Private': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borrowerCompany"]) -> 'Company': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income"]) -> 'Income': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenses"]) -> 'Expenses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crif"]) -> 'Crif': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questionnaire"]) -> 'Questionnaire': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financial"]) -> 'Financial': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amortizationSchedule"]) -> 'AmortizationSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountStatement"]) -> 'AccountStatement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["technicalData"]) -> 'TechnicalData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "dateCreated", "dateApproved", "loanAmount", "lastPaymentDate", "interestRate", "paymentFrequency", "duration", "borrowerType", "biddingType", "loanType", "loanPurpose", "loanRating", "loanStatus", "performanceStatus", "daysLate", "collateral", "collateralType", "insurance", "totalPrincipalRemaining", "totalRepaidPrincipal", "totalRepaidInterest", "biddingEnd", "disbursementDate", "maturityDate", "notes", "link", "bids", "borrowerPrivate", "borrowerCompany", "income", "expenses", "crif", "questionnaire", "financial", "amortizationSchedule", "accountStatement", "technicalData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateApproved"]) -> typing.Union[MetaOapg.properties.dateApproved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanAmount"]) -> typing.Union[MetaOapg.properties.loanAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPaymentDate"]) -> typing.Union[MetaOapg.properties.lastPaymentDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestRate"]) -> typing.Union[MetaOapg.properties.interestRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentFrequency"]) -> typing.Union[MetaOapg.properties.paymentFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borrowerType"]) -> typing.Union[MetaOapg.properties.borrowerType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["biddingType"]) -> typing.Union[MetaOapg.properties.biddingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanType"]) -> typing.Union[MetaOapg.properties.loanType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanPurpose"]) -> typing.Union[MetaOapg.properties.loanPurpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanRating"]) -> typing.Union[MetaOapg.properties.loanRating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanStatus"]) -> typing.Union[MetaOapg.properties.loanStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performanceStatus"]) -> typing.Union[MetaOapg.properties.performanceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysLate"]) -> typing.Union[MetaOapg.properties.daysLate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collateral"]) -> typing.Union[MetaOapg.properties.collateral, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collateralType"]) -> typing.Union[MetaOapg.properties.collateralType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance"]) -> typing.Union[MetaOapg.properties.insurance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPrincipalRemaining"]) -> typing.Union[MetaOapg.properties.totalPrincipalRemaining, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRepaidPrincipal"]) -> typing.Union[MetaOapg.properties.totalRepaidPrincipal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRepaidInterest"]) -> typing.Union[MetaOapg.properties.totalRepaidInterest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["biddingEnd"]) -> typing.Union[MetaOapg.properties.biddingEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disbursementDate"]) -> typing.Union[MetaOapg.properties.disbursementDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maturityDate"]) -> typing.Union[MetaOapg.properties.maturityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bids"]) -> typing.Union[MetaOapg.properties.bids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borrowerPrivate"]) -> typing.Union['Private', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borrowerCompany"]) -> typing.Union['Company', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income"]) -> typing.Union['Income', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenses"]) -> typing.Union['Expenses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crif"]) -> typing.Union['Crif', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questionnaire"]) -> typing.Union['Questionnaire', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financial"]) -> typing.Union['Financial', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amortizationSchedule"]) -> typing.Union['AmortizationSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountStatement"]) -> typing.Union['AccountStatement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["technicalData"]) -> typing.Union['TechnicalData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "dateCreated", "dateApproved", "loanAmount", "lastPaymentDate", "interestRate", "paymentFrequency", "duration", "borrowerType", "biddingType", "loanType", "loanPurpose", "loanRating", "loanStatus", "performanceStatus", "daysLate", "collateral", "collateralType", "insurance", "totalPrincipalRemaining", "totalRepaidPrincipal", "totalRepaidInterest", "biddingEnd", "disbursementDate", "maturityDate", "notes", "link", "bids", "borrowerPrivate", "borrowerCompany", "income", "expenses", "crif", "questionnaire", "financial", "amortizationSchedule", "accountStatement", "technicalData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, None, str, schemas.Unset] = schemas.unset,
        dateApproved: typing.Union[MetaOapg.properties.dateApproved, None, str, schemas.Unset] = schemas.unset,
        loanAmount: typing.Union[MetaOapg.properties.loanAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lastPaymentDate: typing.Union[MetaOapg.properties.lastPaymentDate, None, str, schemas.Unset] = schemas.unset,
        interestRate: typing.Union[MetaOapg.properties.interestRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        paymentFrequency: typing.Union[MetaOapg.properties.paymentFrequency, None, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        borrowerType: typing.Union[MetaOapg.properties.borrowerType, None, str, schemas.Unset] = schemas.unset,
        biddingType: typing.Union[MetaOapg.properties.biddingType, None, str, schemas.Unset] = schemas.unset,
        loanType: typing.Union[MetaOapg.properties.loanType, None, str, schemas.Unset] = schemas.unset,
        loanPurpose: typing.Union[MetaOapg.properties.loanPurpose, None, str, schemas.Unset] = schemas.unset,
        loanRating: typing.Union[MetaOapg.properties.loanRating, None, str, schemas.Unset] = schemas.unset,
        loanStatus: typing.Union[MetaOapg.properties.loanStatus, None, str, schemas.Unset] = schemas.unset,
        performanceStatus: typing.Union[MetaOapg.properties.performanceStatus, None, str, schemas.Unset] = schemas.unset,
        daysLate: typing.Union[MetaOapg.properties.daysLate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        collateral: typing.Union[MetaOapg.properties.collateral, None, str, schemas.Unset] = schemas.unset,
        collateralType: typing.Union[MetaOapg.properties.collateralType, None, str, schemas.Unset] = schemas.unset,
        insurance: typing.Union[MetaOapg.properties.insurance, None, str, schemas.Unset] = schemas.unset,
        totalPrincipalRemaining: typing.Union[MetaOapg.properties.totalPrincipalRemaining, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalRepaidPrincipal: typing.Union[MetaOapg.properties.totalRepaidPrincipal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalRepaidInterest: typing.Union[MetaOapg.properties.totalRepaidInterest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        biddingEnd: typing.Union[MetaOapg.properties.biddingEnd, None, str, schemas.Unset] = schemas.unset,
        disbursementDate: typing.Union[MetaOapg.properties.disbursementDate, str, datetime, schemas.Unset] = schemas.unset,
        maturityDate: typing.Union[MetaOapg.properties.maturityDate, str, datetime, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, None, str, schemas.Unset] = schemas.unset,
        bids: typing.Union[MetaOapg.properties.bids, list, tuple, None, schemas.Unset] = schemas.unset,
        borrowerPrivate: typing.Union['Private', schemas.Unset] = schemas.unset,
        borrowerCompany: typing.Union['Company', schemas.Unset] = schemas.unset,
        income: typing.Union['Income', schemas.Unset] = schemas.unset,
        expenses: typing.Union['Expenses', schemas.Unset] = schemas.unset,
        crif: typing.Union['Crif', schemas.Unset] = schemas.unset,
        questionnaire: typing.Union['Questionnaire', schemas.Unset] = schemas.unset,
        financial: typing.Union['Financial', schemas.Unset] = schemas.unset,
        amortizationSchedule: typing.Union['AmortizationSchedule', schemas.Unset] = schemas.unset,
        accountStatement: typing.Union['AccountStatement', schemas.Unset] = schemas.unset,
        technicalData: typing.Union['TechnicalData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Loan':
        return super().__new__(
            cls,
            *args,
            id=id,
            dateCreated=dateCreated,
            dateApproved=dateApproved,
            loanAmount=loanAmount,
            lastPaymentDate=lastPaymentDate,
            interestRate=interestRate,
            paymentFrequency=paymentFrequency,
            duration=duration,
            borrowerType=borrowerType,
            biddingType=biddingType,
            loanType=loanType,
            loanPurpose=loanPurpose,
            loanRating=loanRating,
            loanStatus=loanStatus,
            performanceStatus=performanceStatus,
            daysLate=daysLate,
            collateral=collateral,
            collateralType=collateralType,
            insurance=insurance,
            totalPrincipalRemaining=totalPrincipalRemaining,
            totalRepaidPrincipal=totalRepaidPrincipal,
            totalRepaidInterest=totalRepaidInterest,
            biddingEnd=biddingEnd,
            disbursementDate=disbursementDate,
            maturityDate=maturityDate,
            notes=notes,
            link=link,
            bids=bids,
            borrowerPrivate=borrowerPrivate,
            borrowerCompany=borrowerCompany,
            income=income,
            expenses=expenses,
            crif=crif,
            questionnaire=questionnaire,
            financial=financial,
            amortizationSchedule=amortizationSchedule,
            accountStatement=accountStatement,
            technicalData=technicalData,
            _configuration=_configuration,
            **kwargs,
        )

from crowd_4_cash_python_sdk.model.account_statement import AccountStatement
from crowd_4_cash_python_sdk.model.active_bid import ActiveBid
from crowd_4_cash_python_sdk.model.amortization_schedule import AmortizationSchedule
from crowd_4_cash_python_sdk.model.company import Company
from crowd_4_cash_python_sdk.model.crif import Crif
from crowd_4_cash_python_sdk.model.expenses import Expenses
from crowd_4_cash_python_sdk.model.financial import Financial
from crowd_4_cash_python_sdk.model.income import Income
from crowd_4_cash_python_sdk.model.private import Private
from crowd_4_cash_python_sdk.model.questionnaire import Questionnaire
from crowd_4_cash_python_sdk.model.technical_data import TechnicalData
