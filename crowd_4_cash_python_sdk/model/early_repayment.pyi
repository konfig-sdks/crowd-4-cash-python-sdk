# coding: utf-8

"""
    C4C REST API

    Access to the Crowd4Cash Crowdlending Platform through an API

    The version of the OpenAPI document: 2.0.0
    Contact: info@crowd4cash.ch
    Created by: https://crowd4cash.ch
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_4_cash_python_sdk import schemas  # noqa: F401


class EarlyRepayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Early repayment details
    """


    class MetaOapg:
        
        class properties:
            
            
            class paymentDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            principalBalance = schemas.Float64Schema
            interest = schemas.Float64Schema
            investorCommission = schemas.Float64Schema
            totalAmount = schemas.Float64Schema
            __annotations__ = {
                "paymentDate": paymentDate,
                "principalBalance": principalBalance,
                "interest": interest,
                "investorCommission": investorCommission,
                "totalAmount": totalAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentDate"]) -> MetaOapg.properties.paymentDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["principalBalance"]) -> MetaOapg.properties.principalBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest"]) -> MetaOapg.properties.interest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investorCommission"]) -> MetaOapg.properties.investorCommission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAmount"]) -> MetaOapg.properties.totalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymentDate", "principalBalance", "interest", "investorCommission", "totalAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentDate"]) -> typing.Union[MetaOapg.properties.paymentDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["principalBalance"]) -> typing.Union[MetaOapg.properties.principalBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest"]) -> typing.Union[MetaOapg.properties.interest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investorCommission"]) -> typing.Union[MetaOapg.properties.investorCommission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAmount"]) -> typing.Union[MetaOapg.properties.totalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymentDate", "principalBalance", "interest", "investorCommission", "totalAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paymentDate: typing.Union[MetaOapg.properties.paymentDate, None, str, schemas.Unset] = schemas.unset,
        principalBalance: typing.Union[MetaOapg.properties.principalBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        interest: typing.Union[MetaOapg.properties.interest, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        investorCommission: typing.Union[MetaOapg.properties.investorCommission, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalAmount: typing.Union[MetaOapg.properties.totalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EarlyRepayment':
        return super().__new__(
            cls,
            *args,
            paymentDate=paymentDate,
            principalBalance=principalBalance,
            interest=interest,
            investorCommission=investorCommission,
            totalAmount=totalAmount,
            _configuration=_configuration,
            **kwargs,
        )
